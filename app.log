# ‚úÖ 2 –ö–†–û–ö ‚Äî –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–≤–æ–¥—É (–ª–æ–∫–∞–ª—å–Ω–æ)

# --- –¶—ñ–ª—ñ ---
# 1. –í–∏–≤–æ–¥–∏—Ç–∏ –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫—Ä–∞—Å–∏–≤–æ, –∑ –ø–æ–∑–Ω–∞—á–∫–∞–º–∏ (emoji / tag)
# 2. –ú–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–π –ª–æ–≥-—Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, logs/app.log)
# 3. –ó–∞–º—ñ—Å—Ç—å print() ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ–¥—É–ª—å logging –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ –∞–±–æ –ø–æ–∑–Ω–∞—á–∫–∞–º–∏

# --- –ö—Ä–æ–∫ 1: —Å—Ç–≤–æ—Ä–∏–º–æ –ª–æ–≥-—Ñ–∞–π–ª —ñ —Ñ–æ—Ä–º–∞—Ç ---
import logging
import os

LOG_DIR = "logs"
LOG_FILE = os.path.join(LOG_DIR, "app.log")

os.makedirs(LOG_DIR, exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)

# --- –ö—Ä–æ–∫ 2: –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ---
logging.info("üì• Starting data fetch...")
logging.warning("‚ö†Ô∏è Rate limit approaching...")
logging.error("‚ùå Failed to load model")

# --- –ö—Ä–æ–∫ 3: –ó–∞–º—ñ–Ω–∏—Ç–∏ –≤—Å—ñ print(...) –≤ –ø—Ä–æ–µ–∫—Ç—ñ –Ω–∞ logging.info / warning / error ---

# --- –ö—Ä–æ–∫ 4 (–æ–ø—Ü—ñ–π–Ω–æ): –ú–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ log_utils.py –¥–ª—è –∫–æ—Ä–æ—Ç—à–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ ---
# log_utils.py
import logging

def info(msg):
    logging.info(f"‚ÑπÔ∏è {msg}")

def success(msg):
    logging.info(f"‚úÖ {msg}")

def warn(msg):
    logging.warning(f"‚ö†Ô∏è {msg}")

def error(msg):
    logging.error(f"‚ùå {msg}")

# –î–∞–ª—ñ –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç–∏: from log_utils import success, error
# success("Model trained")